# set the shell variable (for tmux)
SHELL=/usr/bin/zsh

#Path to your oh-my-zsh configuration.
ZSH=/opt/oh-my-zsh

#ZSH_CUSTOM=$HOME/.dotfiles

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="rgm" # fancy theme: "agnoster"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias mps=/opt/mps/mps
alias pms=/opt/mps/mps

# Google Search function
function search {
w3m "www.google.com/search?q=$(echo $@ | sed 's/ /+/g')"}

# command completion
autoload -U compinit
compinit
zstyle ':completion:*' menu select
setopt completealiases
setopt HIST_IGNORE_DUPS

# CASE_SENSITIVE="true" # case sensitive completion
# DISABLE_AUTO_UPDATE="true" # disable update prompts
# UPDATE_ZSH_DAYS=13 # change how often auto-updates occur
# DISABLE_LS_COLORS="true"
# DISABLE_AUTO_TITLE="true"
# DISABLE_CORRECTION="true" # command autocorrection

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment following line if you want to  shown in the command execution time stamp
# in the history command output. The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|
# yyyy-mm-dd
HIST_STAMPS="mm/dd/yyyy"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(ssh-agent \
    gpg-agent \
    last-working-dir\
    cabal \
    git \
    archlinux \
    mercurial \
    vi-mode \
    history-substring-search)

source $ZSH/oh-my-zsh.sh

# User configuration
setopt vi

# Default Programs
nvimers=('marvin' 'cook')
vimers=('shaggydog')
if [[ " ${nvimers[*]} " == *`hostname`* ]];
    then export EDITOR="vim";
    else export EDITOR="vi";
fi

export PAGER="less"
export BROWSER="vivaldi-stable"
export MOVPLAY="mplayer"
export PICVIEW="eog"
export SNDPLAY="mplayer"
export TERMINAL="gnome-terminal"
export TERM="xterm-256color"

# File Extesions
for ext in html org php com net no; do alias -s $ext=$BROWSER; done
for ext in txt tex; do alias -s $ext=$EDITOR; done
for exit in png jpg gif; do alias -s $ext=$PICVIEW; done
for ext in mpg wmv avi mkv; do alias -s $ext=$MOVPLAY; done
for ext in wav mp3 ogg; do alias -s $ext=$SNDPLAY; done


export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
export PATH=$PATH:/usr/bin/core_perl
export PATH=$PATH:$HOME/.gem/ruby/2.2.0/bin
export PATH=$PATH:$HOME/.gem/ruby/2.5.0/bin
export PATH=$PATH:$HOME/.local/bin

# export MANPATH="/usr/local/man:$MANPATH"

# java classes
export CLASSPATH=$CLASSPATH:~/.javapackages/algs4.jar

# # Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

typeset -A key

key[Up]=${terminfo[kcuul]}
key[Down]=${terminfo[kcudl]}

[[ -n "${key[Up]}"   ]] && bindkey "${key[Up]}"   up-line-or-history   # history-beginning-search-backward
[[ -n "${key[Down]}" ]] && bindkey "${key[Down]}" down-line-or-history # history-beginning-search-forward

if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${termifo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
export PATH=$PATH:$HOME/.dotfiles/bin # user scripts
export PATH=$PATH:/opt/ghci-color # ghci with color
export PATH=$PATH:/opt/misc # misc executables
export PATH=$PATH:/usr/bin/vendor_perl


export PATH=$PATH:$HOME/.cabal/bin:$PATH # haskell binary files
for build in `ls $HOME/.cabal-sandbox`;
    do if [[ -d $HOME/.cabal-sandbox/$build/bin ]];
        then export PATH=$PATH:$HOME/.cabal-sandbox/$build/bin ;
        fi;
    done

# vi mode indicator
function cabalprompt { if [[ "$(cabal_sandbox_info)" != "" ]] ; then echo $(cabal_sandbox_info)' '; fi }
PROMPT=$PROMPT'$(cabalprompt)'

alias mutt=neomutt

if [[ -f ~/.dotfiles/java_apps.zsh ]] then
	source ~/.dotfiles/java_apps.zsh
fi

#setup ros environment
#source /opt/ros/indigo/setup.zsh

#source ~/.dotfiles/haskell/completion.zsh
#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#source ~/catkin_ws/devel/setup.sh


eval 
            fuck () {
                TF_PREVIOUS=$(fc -ln -1 | tail -n 1);
                TF_CMD=$(
                    TF_ALIAS=fuck
                    TF_SHELL_ALIASES=$(alias)
                    PYTHONIOENCODING=utf-8
                    thefuck $TF_PREVIOUS THEFUCK_ARGUMENT_PLACEHOLDER $*
                ) && eval $TF_CMD;
                test -n "$TF_CMD" && print -s $TF_CMD
            }
        
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
alias base16="sed -n '4s/^\# \(.*\) scheme .*$/\1/p' ~/.base16_theme"

source /home/crvs/.docker_defaults
source /home/crvs/.ros_defaults

export LLDB=/usr/bin/lldb
export HOSTALIASES=~/Sync/hosts

if [[ -f /opt/ros/indigo/setup.zsh ]]
    then
    source /opt/ros/indigo/setup.zsh
    export ROS_HOSTNAME=localhost
    export ROS_MASTER_URI=http://localhost:11311
fi

if [[ -d $HOME/catkin_ws/install ]]
    then
    export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$HOME/catkin_ws/install/
fi

export PATH=$PATH:/opt/cling/bin:/opt/cling/bin:/opt/ros/indigo/bin:/home/crvs/.cabal/bin:/usr/bin/vendor_perl:/opt/ghci-color:/home/crvs/.dotfiles/bin:/home/crvs/.rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/crvs/.gem/ruby/2.2.0/bin:/home/crvs/.local/bin

function resource() {rehash; source ~/.zshrc; echo "rehashed and reloaded zshrc";}


export CUDA_HOME="/usr/local/cuda/"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$CUDA_HOME/lib64"

source ~/.aliases
# allow docker to use the local Xserver

source ~/.docker_defaults
source ~/.ros_defaults
RPS1=$RPS1$CONTAINER_NAME
