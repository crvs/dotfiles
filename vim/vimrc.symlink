" Vundle {{{
autocmd!
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'              " plugin management
Plugin 'chriskempson/base16-vim'        " colorschemes
Plugin 'godlygeek/tabular'              " aligning text
Plugin 'coyotebush/vim-pweave'          " python markdown
Plugin 'vim-utils/vim-man'              " man interface
Plugin 'easymotion/vim-easymotion'      " assisted jumping
Plugin 'xolox/vim-notes'                " notetaking
Plugin 'jceb/vim-orgmode'               " emacs style note taking
Plugin 'mileszs/ack.vim'                " grep with better defaults (using ag)
Plugin 'mbbill/undotree'                " visual undo
Plugin 'scrooloose/nerdtree'            " file manager
Plugin 'scrooloose/nerdcommenter'       " keybindings comments
Plugin 'majutsushi/tagbar'              " show tags in a bar
Plugin 'ludovicchabant/vim-gutentags'   " auto compile tags
Plugin 'tpope/vim-fugitive'             " git bindings
Plugin 'kana/vim-textobj-user'          " custom text objects
Plugin 'lervag/vimtex'                  " latex
Plugin 'junegunn/goyo.vim'              " centered interface for writing
Plugin 'junegunn/limelight.vim'         " dim surrounding text
Plugin 'xolox/vim-misc'                 " auxiliary function repo
Plugin 'tpope/vim-unimpaired'           " nice keybindings
Plugin 'tpope/vim-surround'             " surrounding arguments
Plugin 'tpope/vim-repeat'               " add repeat functionality
Plugin 'tpope/vim-dispatch'             " asynchronos execution
Plugin 'christoomey/vim-tmux-navigator' " seamless tmux / vim navigation
Plugin 'Shougo/unite.vim'               " like dmenu for vim
Plugin 'kshenoy/vim-signature'          " handle marks
Plugin 'vim-scripts/OmniCppComplete'    " omnicompletion for c++
Plugin 'vim-scripts/hlint'              " haskell linter (compiler)
Plugin 'tomtom/tlib_vim'                " auxiliary function library (snippets)
Plugin 'MarcWeber/vim-addon-mw-utils'   " auxiliary functions (snippets)
Plugin 'garbas/vim-snipmate'            " snippets engine
Plugin 'honza/vim-snippets'             " snippet files
Plugin 'vim-scripts/gnupg.vim'          " editing pgp encrypted files
call vundle#end()
filetype on
filetype plugin on 
filetype indent off
" }}}
" misc defaults {{{
let localmapleader = '\'
let mapleader      = ','
syntax on
set foldmethod=marker           " fold on fold markers '{{{/}}}'
set scrolloff=5                 " scrolling offset
set number                      " numbered lines
set hidden                      " liberal use of hidden buffers
set ruler                       " show cursor position
set showcmd                     " display incomplete commands
set grepprg=grep\ -nH\ $*       " vimgrep options
set laststatus=0                " status bar display
set mouse=a                     " enable mouse
set complete=.,w,b,u,t,i,kspell " autocompletion order
" backups
set history=1000              " lines of commandd history to keep
set backup                    " keep a backup file (restore previous version)
set backupdir=~/.tmp/backup// " .<fname>~ goes here
set undofile                  " keep an undo file (undo changes after closing)
set undodir=~/.tmp/undo//     " undos are saved in
set noswapfile                " no swapping
set directory=~/.tmp/swap//   " swaps go here
" tabs
set expandtab       " use spaces
set tabstop=4       " tab width for indentation
set softtabstop=4   " consistency
set shiftwidth=4    " consistency
" encoding
set encoding=utf-8                  " displayed encoding
set fileencoding=utf-8              " saved encoding
set fileencodings=utf-8,ucs-bom,prc " possible encodings
" wildmenu
set wildmenu
set wildmode=list:longest,full
set wildignore+=.hg,.git,.svn
set wildignore+=*~,*.un~

set list                                                 " mark text elements
set listchars=tab:│ ,trail:♮,extends:>,precedes:<,nbsp:¯
set linebreak                                            " manage automatic line breaking
set breakat="^I!@*-+;:,./?"
set breakindent                                          " indent wrapped lines
set breakindentopt=min:20                                " minimum amount of characters in indented continuation
set showbreak=›                                          " character to show on indented lines
set smartindent
" registers shortcut
cmap '' '<,'>
" visual line up/down
nnoremap <silent> k gk
nnoremap <silent> j gj
" }}}
" tabularize {{{
vnoremap <leader>t :Tabularize /
nnoremap <leader>t :Tabularize /
"}}}
" fix colors {{{
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif
set background=dark
" }}}
" vimrc management {{{
nnoremap <silent> <leader>vi :VundleInstall<cr>
nnoremap <silent> <leader>vu :VundleUpdate<cr>
nnoremap <silent> <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <silent> <leader>vs :source $MYVIMRC<cr>
au BufWritePost $MYVIMRC :source $MYVIMRC
" }}}
" color column {{{{
function! s:setcolumn()
    set colorcolumn=80
endfunction

function! s:setendbar()
    let &colorcolumn=join(range(80,10000),",")
endfunction
command! Col call <SID>setcolumn()
command! Bar call <SID>setendbar()
"}}}}
" -----------------------------------------------------------------------------
" --                                                                         --
" --                              REFACTORING                                --
" --                                                                         --
" -----------------------------------------------------------------------------

" in C/C++ do not break lines on - or . because of member functions
autocmd FileType c,cpp :setlocal breakat=" ^I(){}@*+:,/" 

set wildignore+=*.o,*.obj,*.so " c++ junk files

" do not break on . functions in python
autocmd FileType python :setlocal breakat=" ^I!@*-+;:,/?()[]{}"
set wildignore+=*.pyc " python junk files

" {{{ copy and paste
vnoremap <c-c> "*y:let @+=@*<CR>
" make the selection register a clone of the copy register
nnoremap  <c-p> "+P
" paste from clipboard to next/prev line
" uses vim unimpaired
nmap <leader>p "*]p
nmap <leader>P "*[p
" }}}
" }}}
" Tagbar {{{
:nnoremap <silent> <leader>]] :Tagbar<cr>
:nnoremap <silent> <leader>]  :TagbarTogglePause<cr>
" }}}
" Undotree {{{
:nnoremap <silent> <leader>> :UndotreeToggle<cr>
:nnoremap <silent> <leader>/ :NERDTreeToggle<cr>

" }}}
" Ack {{{
" use silver searcher (ag)
let g:ackprg = "ag --vimgrep"

" don't automatically jump
cnoreabbrev Ack Ack!
" }}}
" make {{{
set makeprg='make'
autocmd BufEnter Makefile,makefile :setlocal noexpandtab
" }}}
" tmux navigation config {{{
function! s:Free_c_keys()
   if mapcheck('<C-Right>', 'n') != ':TmuxNavigateRight<cr>'
       nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
   endif
   if mapcheck('<C-Up>', 'n') != ':TmuxNavigateUp<cr>'
       nnoremap <silent> <C-Up> :TmuxNavigateUp<cr>
   endif
   if mapcheck('<C-Down>', 'n') != ':TmuxNavigateDown<cr>'
       nnoremap <silent> <C-Down> :TmuxNavigateDown<cr>
   endif
   if mapcheck('<C-Left>', 'n') != ':TmuxNavigateLeft<cr>'
       nnoremap <silent> <C-Left> :TmuxNavigateLeft<cr>
   endif
   if mapcheck('<c-K>', 'n') != ':TmuxNavigateUp<cr>'
      nnoremap <silent> <c-K> :TmuxNavigateUp<cr>
   endif
   if mapcheck('<c-J>', 'n') != ':TmuxNavigateDown<cr>'
      nnoremap <silent> <c-J> :TmuxNavigateDown<cr>
   endif
   if mapcheck('<c-L>', 'n') != ':TmuxNavigateRight<cr>'
      nnoremap <silent> <c-L> :TmuxNavigateRight<cr>
   endif
   if mapcheck('<c-H>', 'n') != ':TmuxNavigateLeft<cr>'
      nnoremap <silent> <c-H> :TmuxNavigateLeft<cr>
   endif
   if mapcheck('<c-/>', 'n') != ':TmuxNavigatePrevious<cr>'
      nnoremap <silent> <c-/> :TmuxNavigatePrevious<cr>
   endif
endfunction
let g:tmux_navigator_no_mappings = 1
call <sid>Free_c_keys()
" }}}
" Goyo and Limelight {{{
nnoremap <silent> <f5> :Goyo<cr>
nnoremap <silent> <f6> :Limelight .3<cr>
" }}}
" NERDCommenter {{{
let NERDRemoveExtraSpaces=1
let NERDTrimTrailingWhitespaces=1
let NERDSpaceDelims=1
let NERDRemoveAltComs=1
" }}}
" window title {{{
set title
function! s:set_title()
if ( $TMUX != "" )
    let &titlestring = 'vim:'.expand('%')
    call system('tmux rename-window ' . &titlestring)
endif
endfunction
autocmd BufNew,BufReadPost,BufEnter * call <SID>set_title()
" }}}
" LaTeX (vimtex) {{{
set conceallevel=0
set wildignore+=*.aux,*.out,*.toc,*.log " tex junk files

let g:vimtex_complete_recursive_bib=1
let g:vimtex_quickfix_enabled=1
let g:vimtex_labels_enable=1
let g:vimtex_view_general_viewer="zathura"
let g:tex_flavor="latex"
let g:Tex_DefaultTargetFormat="pdf"
let g:Tex_MultipleCompileFormats="pdf,dvi"

nnoremap <localleader>lt :<c-u>Unite vimtex_toc<cr>
nnoremap <localleader>ly :<c-u>Unite vimtex_labels<cr>

" }}}
" difference to swapfile {{{
" Convenient command to see the difference between the current buffer
" and the file it was loaded from, thus the changes you made.  Only
" define it when not defined already.
if !exists(":DiffOrig")
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \ | wincmd p | diffthis
endif
" }}}
" buffer navigation {{{
nmap <silent> <leader>bn :bn<cr>
nmap <silent> <leader>bp :bp<cr>
nmap <silent> <leader>bd :bd<cr>
nmap <silent> <leader>bl :Unite buffer<cr>
" }}}
" highlighting and searching {{{
set hlsearch
set incsearch
nnoremap n nzz
nnoremap N Nzz
autocmd ColorScheme * :highlight Search ctermfg=none ctermbg=none cterm=reverse

nnoremap <silent> <leader>h :execute 'match Search /<c-r><c-w>/'<cr>
nnoremap <silent> <leader>h<space> :execute 'match Search /<c-r><c-w>/'<cr>
nnoremap <silent> <leader>H :execute 'call matchadd( "Search" , "<c-r><c-w>")'<cr>
vnoremap <silent> <leader>h y:nohl<cr>:match Search /\M"/<cr>
vnoremap <silent> <leader>H y:call matchadd( "Search" , "\M"")<cr>
nnoremap <silent> <leader>* :Ack! /\<<c-r><c-w>\>/<cr>
nnoremap <silent> <leader>ct :cd %:h<cr>:! ctags -R .<cr>
" }}}
" spellcheck{{{
" less intrusive spellchecking
highlight SpellBad term=bold,underline cterm=bold,underline ctermfg=none ctermbg=none
"}}}
" todo.txt {{{
nnoremap <leader>tt :OpenTodo<cr>
nnoremap <leader>td :execute ':e ' . g:todo_txt_done<cr>

let g:todo_txt_todo='~/.todo.txt/todo.txt'
let g:todo_txt_done='~/.todo.txt/done.txt'
command! OpenTodo :execute ':e '. g:todo_txt_todo

" mini todo.txt syntax
function! s:set_todo_syntax()
    " dates
    syn match Function display /^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} /
    syn match Statement display /\<due\:[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}[ \n]/
    " tags and context
    syn match Special display /@\w\+[ \n]/
    syn match String display /+\w\+[ \n]/
    " priority symbols
    syn match Underlined display /(A)/
    syn match SpecialChar display /([B-Z]) /
endfunction

augroup my_todo_txt
    autocmd!
    autocmd BufEnter,BufRead todo.txt :nmap <buffer> <leader>at $F@i <esc>BE dwi +
    autocmd BufEnter,BufRead todo.txt :nmap <buffer> <leader>ac $a @
    autocmd BufEnter,BufRead todo.txt :nmap <buffer> <leader>ad $a due:
    autocmd BufEnter,BufRead todo.txt :call <SID>set_todo_syntax()
augroup END
" }}}
" {{{ OmniCpp + gutentags
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1

let OmniCpp_DefaultNamespace = ["std","_GLIBCXX_STD"]

au BufEnter *.c,*.cpp,*.hpp,*.h call TagOptions()

let g:gutentags_ctags_name=".tags"

function! TagOptions()
    if !filereadable('.gutctags')
        !echo "-R\n--c++-kinds=+p\n--fields=+iaS\n--extra=+q" > .gutctags
    endif
endfunction
" }}}
" vim notes {{{
let g:notes_directories = ['~/.vim-notes']
let g:notes_suffix = '.md'
" }}}

" select region registers

" vim notes
let g:notes_directories = ['~/.vim-notes']
let g:notes_suffix = '.md'

"typos
iabbr teh the
iabbr taht that



" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break
" undo, so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" get writing permissions to save current file
cmap w!! w !sudo tee % > /dev/null<cr>


" gvim options
if  has("gui_running")
    set guioptions=''
endif


" }}}

" set path+=** " not such a great idea after all
let g:notmuch_reader         = 'mutt -f %s '
let g:notmuch_sendmail       = 'msmtp '
let g:notmuch_html_converter = "w3m --dump"

" include files from the current directory
autocmd BufEnter *.pmd :nnoremap <silent> <leader>m :Dispatch PYTHONPATH=%:h:$PYTHONPATH pweave %<cr>

nnoremap <f2> :NERDTreeToggle<cr>


" {{{ markdown
syn region math start=/\$\$/ end=/\$\$/
syn match math '\$[^$].\{-}\$'
hi link math Statement
let g:markdown_syntax_conceal = 0
let  g:markdown_fenced_languages = [ 'python' , 'bash=sh' , 'html'  , 'haskell' ]
" }}}

" Haskell {{{
autocmd BufEnter *.hs :setlocal et ts=4 sts=4 sw=4
" }}}


" vim: textwidth=80:colorcolumn=80
