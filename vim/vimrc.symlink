" Vundle {{{
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'triglav/vim-visual-increment'
Plugin 'scrooloose/syntastic'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'chrisbra/histwin.vim.git'
Plugin 'chrisbra/NrrwRgn'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'gerw/vim-latex-suite'
Plugin 'gioele/vim-autoswap.git'
Plugin 'gmarik/Vundle.vim'
Plugin 'itchyny/calendar.vim'
Plugin 'junegunn/goyo.vim'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'pbrisbin/vim-syntax-shakespeare'
Plugin 'scrooloose/nerdtree.git'
Plugin 'tmhedberg/matchit'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-unimpaired'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'tpope/vim-fugitive'
" Plugin 'vim-scripts/mru.vim.git'
Plugin 'vim-scripts/bib_autocomp.vim.git'
Plugin 'vim-scripts/gnupg.vim.git'
Plugin 'vim-scripts/LanguageTool'
" Plugin 'vim-scripts/speeddating.vim.git'
Plugin 'szw/vim-dict'
Plugin 'mbbill/undotree'
Plugin 'kshenoy/vim-signature'
Plugin 'AndrewRadev/multichange.vim'
" Plugin 'vim-scripts/buffet.vim'
" Plugin 'kana/vim-arpeggio'
Plugin 'vimwiki/vimwiki'
Plugin 'flazz/vim-colorschemes'
" Plugin 'biskark/vim-ultimate-colorscheme-utility'
Plugin 'haya14busa/incsearch.vim'
Plugin 'mhinz/vim-startify'
Plugin 'vim-scripts/dbext.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
" Plugin 'jceb/vim-orgmode.git' " replaced by vimwiki
" Plugin 'junegunn/limelight.vim' " not used enough
" Plugin 'Lokaltog/vim-easymotion' " cool but unused
call vundle#end()
filetype plugin indent on
" }}}
" Goyo & Limelight {{{
colorscheme BlackSea
" 0x7A69_dark
" Tomorrow-Night-Blue

":let g:limelight_conceal_ctermfg='gray' "disabled limelight
":let g:limelight_conceal_ctermfg=240    "disabled limelight

:nnoremap <silent> <f5> :Goyo<cr>
:inoremap <silent> <f5> <esc>:Goyo<cr>a

" }}}
" Bufferlist {{{
":nnoremap <silent> <f4> :Bufferlist<cr>

" }}}
"misc defaults {{{
:let mapleader=','
:set foldmethod=marker

" temp folder and files
:set dir=/tmp

" fast edit vimrc
:nnoremap <silent> <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <silent> <leader>sv :silent! :source $MYVIMRC<cr>

" nice guides
:set listchars=eol:¬,tab:>-,trail:*,extends:>,precedes:<,nbsp:_
:set list

:autocmd VimResized * :normal <c-w>=
" }}}
" keep 10 lines visible under the cursor {{{
:set scrolloff=5

" }}}
" Haskell mode settings {{{
:au BufEnter *.hs compiler ghc
:let g:ghc="/usr/sbin/ghc"
:let g:haddock_browser="/usr/sbin/firefox"
:let g:haddock_docdir="/usr/share/doc/ghc/html"
" }}}
" tmux & navigation keys {{{
:let g:tmux_navigator_no_mappings = 1
:autocmd BufRead * nunmap <c-j>
:autocmd BufRead * nnoremap <silent> <c-f> :TmuxNavigateLeft<cr>
:autocmd BufRead * nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
:autocmd BufRead * nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
:autocmd BufRead * nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
:autocmd BufRead * nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" }}}
"parenthesis and matchings {{{
:nnoremap <leader>" ciW"<esc>pa"<esc>
:nnoremap <leader>' ciW'<esc>pa'<esc>
:nnoremap <leader>( ciW(<esc>pa)<esc>
:nnoremap <leader>[ ciW[<esc>pa]<esc>
:nnoremap <leader>{ ciW{<esc>pa}<esc>
:nnoremap <leader>< ciW<<esc>pa><esc>

:vnoremap <leader>" c"<esc>pa"<esc>
:vnoremap <leader>' c'<esc>pa'<esc>
:vnoremap <leader>( c(<esc>pa)<esc>
:vnoremap <leader>[ c[<esc>pa]<esc>
:vnoremap <leader>{ c{<esc>pa}<esc>
:vnoremap <leader>< c<<esc>pa><esc>

:inoremap <> <><++><esc>4hi
:inoremap () ()<++><esc>4hi
:inoremap [] []<++><esc>4hi
:inoremap {} {}<++><esc>4hi
:inoremap "" ""<++><esc>4hi
:inoremap '' ''<++><esc>4hi

" }}}
" NERDTree {{{
:nnoremap <silent> <f2> :NERDTreeToggle<cr>
:inoremap <silent> <f2> <esc>:NERDTreeToggle<cr>
:let NERDTreeChDirMode=2

" }}}
" startify {{{
:let g:startify_custom_header=map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']
:let g:startify_skiplist = [
    \ '\/usr\/share\/vim\/.*$',
    \ 'bundle/.*/doc',
    \ '\.aux$',
    \ '\.log$',
    \ '\.sty$',
    \ '\.wiki$',
    \ 'vimrc',
    \ ]
" }}}
" gvim {{{
:if  has("gui_running")
:    set guioptions=''
:    set guifont=\ monofur\ for\ Powerline\ 10.5
:endif
" }}}
"   Undotree {{{
:nnoremap <silent> <f3> :UndotreeToggle<cr>
:inoremap <silent> <f3>  <esc>:UndotreeToggle<cr>

" }}}
"   Vimwiki {{{
let wiki = {}
let wiki.path='~/.vimwiki/'
let wiki.nested_syntaxes = {'python': 'python', 'haskell': 'hs', 'latex': 'latex'}

let g:vimwiki_list = [wiki]
"g:vimwiki_list        [{'maxhi': 0, 'css_name': 'style.css', 'auto_export': 0, 'diary_index': 'diary', 'template_default': '', 'nested_syntaxes': {}, 'diary_sort': 'desc', 'path': '/home/crvs/vimwiki/', 'diary_link_fmt': '%Y-%m-%d', 'template_ext': '', 'syntax': 'default', 'custom_wiki2html': '', 'index': 'index', 'diary_header': 'Diary', 'ext': '.wiki', 'path_html': '/home/crvs/vimwiki_html/', 'temp': 0, 'template_path': '/', 'list_margin': -1, 'diary_rel_path': 'diary/'}]

" }}}
" LaTeX {{{
:let g:tex_flavor="latex"
:let g:Tex_DefaultTargetFormat='pdf'
:let g:Tex_MultipleCompileFormats='pdf,dvi'
:let g:Tex_ViewRule_pdf='zathura'

"" fast compile
":autocmd BufRead *.tex :nnoremap <silent> ZM :w<CR>:call Tex_RunLaTeX()<CR>
" easy comment
:autocmd BufRead *.tex :nnoremap <silent> <leader>c I%<esc>
:autocmd BufRead *.tex :vnoremap <silent> <leader>c norm I%<esc>
" open pdf
:autocmd BufRead *.tex :command! OpenPDF :execute '!setsid zathura 'expand('%:h').'/'.expand('%:r').'.pdf 1>&/dev/null &'
" more environments to collapse
:autocmd BufRead *.tex :let Tex_FoldedEnvironments="verbatim,comment,eq,gather,align,figure,table,thebibliography,keywords,abstract,titlepage,eq,theorem,corollary,lemma,algorithm,proof,IEEEproof,remark,definition,tikzpicture"

:autocmd ColorScheme * :highlight Folded cterm=bold ctermbg=none ctermfg=green
" }}}
" Arpeggios {{{
":augroup arpeggio
":   call arpeggio#load()
":   au BufEnter * so ~/.dotfiles/vim/arpeggio.unmap
":   au BufEnter * call arpeggio#map('n','s',1,'wo','<c-w>o')
":   au BufEnter * call arpeggio#map('n','s',0,'bl',':Bufferlist<cr>')
":   au BufEnter * call arpeggio#map('i','s',1,'nt','<c-j>')
":   au BufEnter * call arpeggio#map('i','s',1,'()','()')
":   au BufEnter * call arpeggio#map('i','s',1,'[]','[]')
":   au BufEnter * call arpeggio#map('i','s',1,'{}','{}')
":   au BufEnter * call arpeggio#map('i','s',1,'<>','<>')
":augroup END
"
" }}}
" Search {{{
:set hlsearch
:set incsearch
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap <silent> <esc><esc> :noh<cr>:match<cr>
:autocmd ColorScheme * :highlight Search ctermfg=black ctermbg=yellow cterm=NONE
:autocmd ColorScheme * :highlight Match  ctermfg=black ctermbg=yellow cterm=NONE
:command! -nargs=1 S :match Search /<args>/

" }}}
" navigation mode swapping{{{
:nnoremap <silent> j gj
:nnoremap <silent> k gk
:let g:visual_nav=1
:function! s:toggle_visual_nav()
:   let g:visual_nav=!g:visual_nav
:   if g:visual_nav
:       nnoremap <silent> j gj
:       nnoremap <silent> k gk
:       echo "visual navigation ON"
:   else
:       nnoremap <silent> j  j
:       nnoremap <silent> k k
:       echo "visual navigation OFF"
:   endif
:endfunction
:nnoremap <silent> <leader>v :call <sid>toggle_visual_nav()<cr>

" }}}
" vim calendar options for google calendar {{{
:let g:calendar_google_calendar=1
:let g:calendar_google_task=1

" }}}
" statusbar {{{
:set rnu
:set number
:set laststatus=2

" }}}
" airline {{{

" THEMES: badwolf ; base16 ; bubblegum ; dark ; durant ; hybrid ; jellybeans ; kalisi ; kolor ; laederon ; light ; lucius ; luna ; molokai ; monochrome ; murmur ; powerlineish ; raven ; serene ; silver ; simple ; solarized ; sol ; tomorrow ; ubaryd ; understated ; wombat ; zenburn
:let g:airline_theme='luna'

:if (&ft=='tex')
:   let g:airline#extensions#whitespace#enabled = 0
:endif

:let g:airline_powerline_fonts = 1
:let g:airline#extensions#tabline#enabled = 1

" }}}
" bufferline {{{

let g:bufferline_echo = 1
let g:bufferline_active_buffer_left = '['
let g:bufferline_active_buffer_right = ']'
let g:bufferline_modified = '+'
let g:bufferline_show_bufnr = 1
let g:bufferline_rotate = 1
let g:bufferline_fixed_index =  0 "always first
let g:bufferline_fname_mod = ':t'
let g:bufferline_inactive_highlight = 'StatusLine'
let g:bufferline_active_highlight = 'StatusLine'
let g:bufferline_solo_highlight = 1
let g:bufferline_excludes = [] "see source for defaults
let g:bufferline_echo = 0
autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
    \ .bufferline#get_status_string()
" }}}
" Git configurations {{{
:autocmd ColorScheme * :highlight hlSignColumn          ctermbg=NONE ctermfg=NONE   cterm=NONE guibg=NONE guifg=NONE   gui=NONE
:autocmd ColorScheme * :highlight SignColumn            ctermbg=NONE ctermfg=NONE   cterm=NONE guibg=NONE guifg=NONE   gui=NONE
:autocmd ColorScheme * :highlight GitGutterAdd          ctermbg=NONE ctermfg=green  cterm=bold guibg=NONE guifg=green  gui=bold
:autocmd ColorScheme * :highlight GitGutterChange       ctermbg=NONE ctermfg=yellow cterm=bold guibg=NONE guifg=yellow gui=bold
:autocmd ColorScheme * :highlight GitGutterDelete       ctermbg=NONE ctermfg=red    cterm=bold guibg=NONE guifg=red    gui=bold
:autocmd ColorScheme * :highlight GitGutterChangeDelete ctermbg=NONE ctermfg=red    cterm=bold guibg=NONE guifg=red    gui=bold

" }}}
" tabs and linebreaks {{{
:set tabstop=4 shiftwidth=4 expandtab
:set smartindent
:set showbreak=>\ "begin broken line
:set breakindent
:set linebreak

" }}}
" common typos {{{
:iabbr teh the

:autocmd ColorScheme * :highlight SpellBad ctermfg=black ctermbg=green guifg=black guibg=yellow cterm=NONE
" allow to use hidden buffers more liberally
:set hidden
:set grepprg=grep\ -nH\ $*

:noremap <leader>o o<Esc>k
:noremap <leader>O O<Esc>j
" custom modes documentation
":helptags ~/.vim/doc

" Use Vim settings, rather than Vi settings (much better!).  This must
" be first, because it changes other options as a side effect.
:set nocompatible

" allow backspacing over everything in insert mode
:set backspace=indent,eol,start

:if has("vms")
:   set nobackup      " do not keep a backup file, use versions instead
:else
:   set backup        " keep a backup file (restore to previous version)
:   set undofile      " keep an undo file (undo changes after closing)
:endif
:set history=50      " keep 50 lines of command line history
:set ruler       " show the cursor position all the time
:set showcmd     " display incomplete commands


" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break
" undo, so that you can undo CTRL-U after inserting a line break.
:inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable
" it.
:set mouse=a

" Switch syntax highlighting on, when the terminal has colors Also
" switch on highlighting the last used search pattern.
:syntax on
:nohl


" Convenient command to see the difference between the current buffer
" and the file it was loaded from, thus the changes you made.  Only
" define it when not defined already.
:if !exists(":DiffOrig")
   command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
               \ | wincmd p | diffthis
:endif


:let g:languagetool_jar='/usr/share/java/languagetool/languagetool.jar'

:if &ft == 'org'
:    let maplocalleader='\'
:endif
