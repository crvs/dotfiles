autocmd!
" Vundle {{{
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'felipec/notmuch-vim'
Plugin 'guyzmo/notmuch-abook'

" management
Plugin 'vim-utils/vim-man'
Plugin 'prettier/vim-prettier'
Plugin 'gmarik/Vundle.vim'
" distance arrayPlugin 'vim-scripts/DoxygenToolkit.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'xolox/vim-notes'
Plugin 'xolox/vim-misc'
Plugin 'kana/vim-niceblock'

Plugin 'mileszs/ack.vim'
Plugin 'Raimondi/delimitMate'

" ide style
Plugin 'mbbill/undotree'
Plugin 'scrooloose/nerdcommenter.git'
Plugin 'gilligan/vim-lldb'

" tags
Plugin 'majutsushi/tagbar'
Plugin 'ludovicchabant/vim-gutentags'

" git
Plugin 'tpope/vim-fugitive'

" text objects (think around/inside-obj)
Plugin 'kana/vim-textobj-user'

Plugin 'honza/vim-snippets'

" latex
Plugin 'lervag/vimtex'

Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-dispatch'

Plugin 'Shougo/unite.vim'

Plugin 'christoomey/vim-tmux-navigator'

" colors
Plugin 'chriskempson/base16-vim'

Plugin 'gioele/vim-autoswap.git'

Plugin 'haya14busa/incsearch.vim'

Plugin 'kshenoy/vim-signature'

Plugin 'rhysd/vim-clang-format'

" Plugin 'tmhedberg/matchit'

" Plugin 'vim-scripts/gnupg.vim.git'
Plugin 'vim-scripts/OmniCppComplete.git'

Plugin 'sirver/ultisnips'
call vundle#end()
filetype plugin indent off

" }}}
" encoding issues {{{

set encoding=utf-8			" target 'default' encoding
scriptencoding utf-8			" encoding of _this_ script
set fileencoding=utf-8			" encoding of the file to save
set fileencodings=utf-8,ucs-bom,prc	" possible encodings

" }}}
" indentation,colorcolumn,wrapping,list {{{

" color column functions {{{{
function! s:setcolumn()
	set colorcolumn=80
endfunction

function! s:setendbar()
	let &colorcolumn=join(range(80,10000),",")
endfunction
"}}}}
command! Col call <SID>setcolumn()
command! Bar call <SID>setendbar()

set list
set listchars=tab:│ ,trail:♮,extends:>,precedes:<,nbsp:¯

set noexpandtab
set tabstop=8
set shiftwidth=0

set linebreak      " break lines at text width
set breakat= "default: breakat=" ^I!@*-+;:,./?"
" in C/C++ do not break lines on - or . because of member functions
" do not break on member functions in python
autocmd BufEnter *.c,*.cpp,*.h,*.hpp :setlocal breakat=" ^I(){}@*+:,/"<cr>
autocmd BufEnter *.py :setlocal breakat=" ^I!@*-+;:,/?()[]{}"

set breakindent		" indent wrapped lines
set breakindentopt=min:20 " minimum amount of characters in indented continuation
set showbreak=› 	" character to show on indented lines

set smartindent
" }}}
" backups {{{
set history=1000      " lines of commandd history to keep
set undodir=~/.tmp/undo//
set directory=~/.tmp/swap//
set backupdir=~/.tmp/backup//
set backup " keep a backup file (restore to previous version)
set undofile      " keep an undo file (undo changes after closing)
set noswapfile
" }}}
" {{{ copy and paste
vnoremap <c-c> "*y:let @+=@*<CR>
" make the selection register a clone of the copy register
nnoremap  <c-p> "+P
" paste from clipboard to next/prev line
" uses vim unimpaired
nmap <leader>p "*]p
nmap <leader>P "*[p
" }}}
" wildmenu {{{
set wildmenu
set wildmode=list:longest,full

set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc,*.log
set wildignore+=*.o,*.obj,*.so
set wildignore+=*~,*.un~
set wildignore+=*.pyc
" }}}
" Tagbar {{{
:nnoremap <silent> <f4> :Tagbar<cr>
:nnoremap <silent> <f4>p :TagbarTogglePause<cr>
" }}}
" Undotree {{{
:nnoremap <silent> <f3> :UndotreeToggle<cr>
:inoremap <silent> <f3>  <esc>:UndotreeToggle<cr>
" }}}
" Ack {{{
" use silver searcher (ag)
let g:ackprg = "ag --vimgrep"

" don't automatically jump
cnoreabbrev Ack Ack!
" }}}
" make {{{
set makeprg='make'
autocmd BufEnter Makefile,makefile :setlocal noexpandtab
" }}}
" tmux navigation config {{{
function! s:Free_c_keys()
   if mapcheck('<C-Right>', 'n') != ':TmuxNavigateRight<cr>'
       nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
   endif
   if mapcheck('<C-Up>', 'n') != ':TmuxNavigateUp<cr>'
       nnoremap <silent> <C-Up> :TmuxNavigateUp<cr>
   endif
   if mapcheck('<C-Down>', 'n') != ':TmuxNavigateDown<cr>'
       nnoremap <silent> <C-Down> :TmuxNavigateDown<cr>
   endif
   if mapcheck('<C-Left>', 'n') != ':TmuxNavigateLeft<cr>'
       nnoremap <silent> <C-Left> :TmuxNavigateLeft<cr>
   endif
   if mapcheck('<c-K>', 'n') != ':TmuxNavigateUp<cr>'
      nnoremap <silent> <c-K> :TmuxNavigateUp<cr>
   endif
   if mapcheck('<c-J>', 'n') != ':TmuxNavigateDown<cr>'
      nnoremap <silent> <c-J> :TmuxNavigateDown<cr>
   endif
   if mapcheck('<c-L>', 'n') != ':TmuxNavigateRight<cr>'
      nnoremap <silent> <c-L> :TmuxNavigateRight<cr>
   endif
   if mapcheck('<c-H>', 'n') != ':TmuxNavigateLeft<cr>'
      nnoremap <silent> <c-H> :TmuxNavigateLeft<cr>
   endif
   if mapcheck('<c-/>', 'n') != ':TmuxNavigatePrevious<cr>'
      nnoremap <silent> <c-/> :TmuxNavigatePrevious<cr>
   endif
endfunction
let g:tmux_navigator_no_mappings = 1
call <sid>Free_c_keys()
" }}}
" Goyo and Limelight {{{
nnoremap <silent> <f5> :Goyo<cr>
nnoremap <silent> <f6> :Limelight .3<cr>
" }}}
" fast edit vimrc {{{
nnoremap <silent> <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <silent> <leader>vs :source $MYVIMRC<cr>
" }}}
" NERDCommenter {{{
let NERDRemoveExtraSpaces=1
let NERDTrimTrailingWhitespaces=1
let NERDSpaceDelims=1
let NERDRemoveAltComs=1
" }}}
" window title {{{
set title
function! s:set_title()
	let &titlestring = 'vim:'.expand('%')
	call system('tmux rename-window ' . &titlestring)
endfunction
autocmd BufNew,BufReadPost,BufEnter * call <SID>set_title()
" }}}
" LaTeX (vimtex) {{{
set conceallevel=0
if !exists('g:ycm_semantic_triggers')
let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
\ 're!\\[A-Za-z]*cite[A-Za-z]*(\[[^]]*\]){0,2}{[^}]*',
\ 're!\\[A-Za-z]*ref({[^}]*|range{([^,{}]*(}{)?))',
\ 're!\\hyperref\[[^]]*',
\ 're!\\includegraphics\*?(\[[^]]*\]){0,2}{[^}]*',
\ 're!\\(include(only)?|input){[^}]*',
\ 're!\\\a*(gls|Gls|GLS)(pl)?\a*(\s*\[[^]]*\]){0,2}\s*\{[^}]*',
\ 're!\\includepdf(\s*\[[^]]*\])?\s*\{[^}]*',
\ 're!\\includestandalone(\s*\[[^]]*\])?\s*\{[^}]*',
\ ]

let g:vimtex_complete_recursive_bib=1
let g:vimtex_labels_enable=1
let g:vimtex_view_general_viewer="zathura"
let g:tex_flavor="latex"
let g:Tex_DefaultTargetFormat="pdf"
let g:Tex_MultipleCompileFormats="pdf,dvi"

nnoremap <localleader>lt :<c-u>Unite vimtex_toc<cr>
nnoremap <localleader>ly :<c-u>Unite vimtex_labels<cr>

" }}}
" Ultisnips {{{
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
"}}}
" difference to swapfile {{{
" Convenient command to see the difference between the current buffer
" and the file it was loaded from, thus the changes you made.  Only
" define it when not defined already.
if !exists(":DiffOrig")
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
	\ | wincmd p | diffthis
endif
" }}}
" buffer navigation {{{
nmap <silent> <leader>b :bn<cr>
nmap <silent> <leader>B :bp<cr>
nmap <silent> <leader>d :bd<cr>
nmap <silent> <leader>D :bd!<cr>
nmap          <leader>s :ls<cr>:b
" }}}
" highlighting and searching {{{
set hlsearch
set incsearch
nnoremap n nzz
nnoremap N Nzz
autocmd ColorScheme * :highlight Search ctermfg=none ctermbg=none cterm=reverse

nnoremap <silent> <leader>h :execute 'match Search /<c-r><c-w>/'<cr>
nnoremap <silent> <leader>h<space> :execute 'match Search /<c-r><c-w>/'<cr>
nnoremap <silent> <leader>H :execute 'call matchadd( "Search" , "<c-r><c-w>")'<cr>
vnoremap <silent> <leader>h y:nohl<cr>:match Search /\M"/<cr>
vnoremap <silent> <leader>H y:call matchadd( "Search" , "\M"")<cr>
nnoremap <silent> <leader>* :Ack! /\<<c-r><c-w>\>/<cr>
nnoremap <silent> <leader>ct :cd %:h<cr>:! ctags -R .<cr>
"}}}
" {{{ OmniCpp + gutentags

let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1

let OmniCpp_DefaultNamespace = ["std","_GLIBCXX_STD"]

au BufEnter *.c,*.cpp,*.hpp,*.h call TagOptions()

function! TagOptions()
    if !filereadable('.gutctags')
        !echo "-R\n--c++-kinds=+p\n--fields=+iaS\n--extra=+q" > .gutctags
    endif
endfunction
"for omnicompletion cpp files should be run into ctags with
" ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
" }}}
" {{{ fix colors
"set termguicolors
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif
" }}}
" todo.txt {{{

:nnoremap <leader>tt :OpenTodo<cr>
:nnoremap <leader>td :execute ':e ' . g:todo_txt_done<cr>

:let g:todo_txt_todo='~/.todo.txt/todo.txt'
:let g:todo_txt_done='~/.todo.txt/done.txt'
:command! OpenTodo :execute ':e '. g:todo_txt_todo

:augroup my_todo_txt
:   autocmd!
:   autocmd BufEnter,BufRead todo.txt :nmap <leader>at $F@i <esc>BE dwi +
:   autocmd BufEnter,BufRead todo.txt :nmap <leader>ac $a @
:   autocmd BufEnter,BufRead todo.txt :nmap <leader>ad $a due:
:augroup END

" }}}
" force save {{{
cmap w!! w !sudo tee % > /dev/null<cr>
" }}}
" vim notes {{{
let g:notes_directories = ['~/.vim-notes']
let g:notes_suffix = '.md'
" }}}
"misc defaults {{{

cmap '' '<,'>

let mapleader=','
set foldmethod=marker

" keep 5 lines visible under the cursor
set scrolloff=5

" netrw (file manager) {{{
nnoremap <f2> :Lexplore<cr>
let g:netrw_list_hide = '\(^\.\|\~$\)'
" }}}
" gvim {{{
if  has("gui_running")
    set guioptions=''
endif
" }}}
" Search {{{
":autocmd ColorScheme * :highlight Match  ctermfg=black ctermbg=yellow cterm=NONE

nnoremap <silent> j gj
nnoremap <silent> k gk
" }}}
" statusbar {{{
set laststatus=1
" }}}
    " common typos {{{
    :iabbr teh the
    :iabbr taht that

    " better switching between buffers



    " allow to use hidden buffers more liberally
    :set hidden
    :set grepprg=grep\ -nH\ $*

    " allow backspacing over everything in insert mode
    ":set backspace=indent,eol,start

    :set ruler       " show the cursor position all the time
    :set showcmd     " display incomplete commands


    " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break
    " undo, so that you can undo CTRL-U after inserting a line break.
    :inoremap <C-U> <C-G>u<C-U>

    " In many terminal emulators the mouse works just fine, thus enable
    " it.
    "":set mouse=a


    " Switch syntax highlighting on, when the terminal has colors Also
    " switch on highlighting the last used search pattern.
    :syntax on


    :set complete=.,w,b,u,t,i,kspell
    " }}}
" set path+=** " not such a great idea after all

set background=dark



hi SpellBad term=bold,underline cterm=bold,underline

set number
" vim: textwidth=80:colorcolumn=80
