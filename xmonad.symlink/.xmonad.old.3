-- Xmonad config file by John Goerzen, taken from 
-- http://www.haskell.org/haskellwiki/Xmonad/Config_archive/John_Goerzen%27s_Configuration 
-- with a few modifiactions
-- modifications imported from darzyas version on GitHub

import Data.List
-- import Data.Ratio
-- import Debug.Trace
-- import Foreign.C.Types
import System.Exit
import System.IO
import XMonad
-- import XMonad.Actions.CycleWS
-- import XMonad.Actions.Volume
-- import XMonad.Config.Desktop
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
-- import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.SetWMName
import XMonad.Hooks.UrgencyHook -- (withUrgencyHook,urgencyBorderColor,BorderUrgencyHook,FocusHook)
-- import XMonad.Layout.Drawer
-- import XMonad.Layout.DecorationMadness
-- import qualified XMonad.Layout.Grid as G
-- import XMonad.Layout.HintedGrid
-- import XMonad.Layout.IM
-- import XMonad.Layout.LayoutModifier as LM
import XMonad.Layout.NoBorders(noBorders)
-- import XMonad.Layout.PerWorkspace
-- import XMonad.Layout.Reflect
-- import XMonad.Prompt
-- import XMonad.Prompt.Shell
import qualified XMonad.StackSet as W
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig


-- import XMonad.Util.Scratchpad

startup :: X ()
startup = do 
    spawn "/home/crvs/.xsession"
    
    --make script to automatically check if VGA1 is connected
    --in which case it will automatically run dualVGAh
    --if "connected" `isInfixOf` 
    --spawn "xrandr | egrep VGA1"
    
    -- fonts:
    --       xft:DejaVu Sans Mono:pixelsize=10
  
main :: IO ()
main = do
    -- xmproc gets (an) IO Handle for the process
    xmproc <- spawnPipe "/home/crvs/.cabal/bin/xmobar /home/crvs/.xmobarrc.hs"
    xmonad $ withUrgencyHookC StdoutUrgencyHook urgencyConfig { suppressWhen = Focused, remindWhen = Dont } $defaultConfig
        { manageHook = myManageHook
        , startupHook = startup
        , layoutHook = myLayout 
        , focusFollowsMouse = False
        , logHook = takeTopFocus >> 
                (dynamicLogWithPP xmobarPP
                    { ppOutput = hPutStrLn xmproc
                    , ppTitle  = xmobarColor "#ffff00" "#000000" . shorten 40
                    , ppUrgent = xmobarColor "#ffffff" "#ff0000" . Main.xmobarStrip
                    }) >>
                         ewmhDesktopsLogHook >>
                             setWMName "XMonad"
        , modMask = mod4Mask -- Rebind Mod to the mod4 key (Win)
        , terminal = "xterm" -- "urxvt -e tmux"
        , workspaces = ["1:work","2:web","3:mail","4","5","6","7","8","9","0"]
        }`additionalKeys`
            [ (( modM , xK_z ) , spawn "xscreensaver-command -lock")
            , (( modS , xK_z ) , spawn "xscreensaver-command -lock && sleep 2 && sudo pm-suspend")
            , (( modS , xK_BackSpace ), io (exitWith ExitSuccess))
            , (( modS , xK_e ) , spawn "emacs")
            , (( modM , xK_a ) , spawn "xterm -e alsamixer -c 0")
            , (( modM , brightnessUpKey) , brightnessUpCommand)
            , (( modM , brightnessDownKey) , brightnessDownCommand)
            , (( modM , raiseAudioKey ), raiseAudioCommand)
            , (( modM , lowerAudioKey ), lowerAudioCommand)
            , (( modM , muteAudioKey ), muteAudioCommand)
            , (( modM , xK_f ) , spawn "urxvt -e ranger")
            , (( modM , xK_m ) , spawn "urxvt -e mocp -T /usr/share/moc/themes/yellow_red_theme")
            , (( modM , xK_i ) , spawn "urxvt -e irssi")
            , (( modS , xK_t ) , spawn "transset" )
            , (( modS , xK_q ) , spawn "xmonad --recompile" )
            , (( modM , pauseKey ) , pauseCommand )
            , (( modM , nextKey ) , nextCommand )
            , (( modM , previousKey) , previousCommand)
	]
         --`removeKeys` 
         --   [ ( modS , xK_q ) -- mod + shift + q is just too easy to type
         --   ]
    where 
        -- standard modmasks (non-standard shorthand-notation)
        modM              = mod4Mask
        modS              = mod4Mask .|. shiftMask
        -- sound volume control keys and respective alsa commands
        raiseAudioKey     = (stringToKeysym "XF86AudioRaiseVolume")
        raiseAudioCommand = (spawn "amixer set -c 0 Master unmute && amixer set -c 0 Speaker unmute && amixer set -c 0 Speaker 0dB && amixer set -c 0 Headphone unmute && amixer set -c 0 Headphone 0dB && amixer set -c 0 Master 4dB+") 
        lowerAudioKey     = (stringToKeysym "XF86AudioLowerVolume")
        lowerAudioCommand = (spawn "amixer set -c 0 Master 4dB-")
        muteAudioKey      = (stringToKeysym "XF86AudioMute") -- debug the mute/unmute command
        muteAudioCommand  = (spawn "amixer set -c 0 Master togglemute && amixer set -c 0 Headphone unmute && amixer set -c 0 Speaker unmute")
	brightnessUpKey   = (stringToKeysym "XF86MonBrightnessUp")
	brightnessDownKey = (stringToKeysym "XF86MonBrightnessDown")
        pauseKey          = (stringToKeysym "XF86AudioPlay")
	pauseCommand      = (spawn "mocp -G")
	nextKey           = (stringToKeysym "XF86AudioNext")
	nextCommand       = (spawn "mocp -f")
        previousKey       = (stringToKeysym "XF86AudioPrev")
	previousCommand   = (spawn "mocp -r")
	brightnessUpCommand   = (spawn "xbacklight -inc 10")
 	brightnessDownCommand = (spawn "xbacklight -dec 10")

-- custom layout hook
----- avoid struts makes windows avoid toolbars
-- myLayout :: LayoutClass l a => AvoidStruts l
-- Choose (AvoidStruts Layout) Layout a -- Choose (AvoidStruts Layout)
myLayout = avoidStruts (tallLayout ||| mirrorTall ||| noBorders Full) ||| noBorders Full
    where 
        tallLayout = Tall {tallNMaster = 1, tallRatioIncrement = 3 / 100, tallRatio = 1 / 2}
        mirrorTall = Mirror tallLayout
        -- drawer = simpleDrawer 0.01 0.3 (ClassName "Pidgin")

takeTopFocus = withWindowSet $ maybe (setFocusX =<< asks theRoot) takeFocusX . W.peek

myManageHook = composeAll
    [ title =? "alsamixer" --> doFloat
    , className =? "Pidgin" --> doFloat
    , className =? "Firefox" --> doF (W.shift "2:web")
    , className =? "Thunderbird" --> doF (W.shift "3:mail")
    , manageDocks
    ] <+> manageHook defaultConfig

xmobarStrip :: String -> String
xmobarStrip = strip [] where
    strip keep x
      | null x                 = keep
      | "<fc="  `isPrefixOf` x = strip keep (drop 1 . dropWhile (/= '>') $ x)
      | "</fc>" `isPrefixOf` x = strip keep (drop 5  x)
      | '<' == head x          = strip (keep ++ "<") (tail x)
      | otherwise              = let (good,x') = span (/= '<') x
                                 in strip (keep ++ good) x'

takeFocusX w = withWindowSet $ \ ws -> do
                 dpy <- asks display
                 wmtakef <- atom_WM_TAKE_FOCUS
                 wmprot <- atom_WM_PROTOCOLS
                 protocols <- io $ getWMProtocols dpy w
                 if (wmtakef `elem` protocols) then
                     do
                       io $ allocaXEvent $ \ev -> do
                                        setEventType ev clientMessage
                                        setClientMessageEvent ev w wmprot 32 wmtakef currentTime
                                        sendEvent dpy w False noEventMask ev else
                     return ()
